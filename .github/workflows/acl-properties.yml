name: Get KMS properties

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      deployment_name:
        type: string
        description: "Name of the deployment"
        default: "depa-inferencing-kms"
  workflow_call:
    inputs:
      deployment_name:
        type: string
        description: "Name of the deployment"
        default: "depa-inferencing-kms"

jobs:
  deploy:
    name: ${{ inputs.deployment_name }}
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        env:
          GH_TOKEN: ${{ github.token }}
        run: pip install -r requirements.txt

      - name: Log into Azure
        uses: azure/login@v2
        with:
          # Use a managed identity to authenticate to Azure
          # Use properties such as client-id, tenant-id, and subscription-id in the secrets and vars
          # The managed identity should have a federated credential with subject identiier repo:<organization>/<repo>:pull_request
          # Use subject identifier repo:<organization>/<repo>:ref:refs/heads/<branch> for running manual CI's
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure CLI confidentialledger extension
        run: |
          az version
          az extension add --name confidentialledger --yes

      - name: Get service certificate
        env:
          DEPLOYMENT_NAME: ${{ inputs.deployment_name }}
        run: |
          curl https://identity.confidential-ledger.core.azure.com/ledgerIdentity/${DEPLOYMENT_NAME} \ 
          | jq -r '.ledgerTlsCertificate' > ${GITHUB_WORKSPACE}/service_cert.pem

      - name: Get key release policy
        env:
          DEPLOYMENT_NAME: ${{ inputs.deployment_name }}
        run: |
          export KMS_SERVICE_CERT_PATH=${GITHUB_WORKSPACE}/service_cert.pem
          curl ${KMS_URL}/app/keyReleasePolicy --cacert ${KMS_SERVICE_CERT_PATH} \ 
            -H "Content-Type: application/json" -w '\n' | jq


      - name: Get settings policy
        env:
          DEPLOYMENT_NAME: ${{ inputs.deployment_name }}
        run: |
          export KMS_SERVICE_CERT_PATH=${GITHUB_WORKSPACE}/service_cert.pem
          curl ${KMS_URL}/app/settingsPolicy --cacert ${KMS_SERVICE_CERT_PATH} \ 
            -H "Content-Type: application/json" -w '\n' | jq
